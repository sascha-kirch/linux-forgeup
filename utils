#!/usr/bin/env bash

# Prevent multiple sourcing
# [ "$sourced_a_sh" != "" ] && return || sourced_a_sh=.


_bold=$(tput bold)
_normal=$(tput sgr0)
# 256 colors: https://unix.stackexchange.com/a/768209
_red=$(tput setaf 1)
_orange=$(tput setaf 3)
_blue=$(tput setaf 4)
_purple=$(tput setaf 5)

# Clear screen and print the logo
print_logo() {
    clear
    echo "
${_blue}
 _______  _______  _______  _______  _______           _______
(  ____ \(  ___  )(  ____ )(  ____ \(  ____ \|\     /|(  ____ )
| (    \/| (   ) || (    )|| (    \/| (    \/| )   ( || (    )|
| (__    | |   | || (____)|| |      | (__    | |   | || (____)|
|  __)   | |   | ||     __)| | ____ |  __)   | |   | ||  _____)
| (      | |   | || (\ (   | | \_  )| (      | |   | || (
| )      | (___) || ) \ \__| (___) || (____/\| (___) || )
|/       (_______)|/   \__/(_______)(_______/(_______)|/
${_purple}
Linux System Setup Tool
by: Sascha Kirch
${_normal}
"
}

_log() {
    local log_level=$1
    local message=$2
    local timestamp=$(date +"%H:%M:%S")
    # local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    local color

    case $log_level in
        "INFO")
            color=$_blue
            ;;
        "WARNING")
            color=$_orange
            ;;
        "ERROR")
            color=$_red
            ;;
        "CONFIG")
            color=$_purple
            ;;
        *)
            color=$_normal
            ;;
    esac

    echo "${color}${_bold} $timestamp [$log_level][FORGE-UP] ${_normal} $message"

}

log_info() {
    _log "INFO" "$1"
}

log_warning() {
    _log "WARNING" "$1"
}

log_error() {
    _log "ERROR" "$1"
}

log_config() {
    _log "CONFIG" "$1"
}

can_sudo(){
    groups "$(id -un)" 2>/dev/null | grep -q sudo
    if [ $? -ne 0 ]; then
        log_warning "User $(id -un) is not in the sudo group."
        return 1
    else
        log_info "User $(id -un) is in the sudo group."
        return 0
    fi
}

# Function to check if a package is installed
is_installed() {
    dpkg -s "$1" &> /dev/null
}

file_exists(){
    if [ ! -f "$1" ]; then
        log_error "File $1 does not found!"
        return 1
    else
        log_info "File $1 found."
        return 0
    fi
}

# Function to install packages if not already installed
install_apt_packages() {
    local packages=("$@")
    local to_install=()

    for pkg in "${packages[@]}"; do
        if ! is_installed "$pkg"; then
            to_install+=("$pkg")
        fi
    done

    if [ ${#to_install[@]} -ne 0 ]; then
        log_info "Installing: ${to_install[*]}"
        sudo apt-get install -y "${to_install[@]}"
    else
        log_warning "No package to be installed."
    fi
}

enable_services() {
    local services=("$@")

    for service in "${services[@]}"; do
        if ! systemctl is-enabled "$service" &> /dev/null; then
            log_info "Enabling $service..."
            sudo systemctl enable "$service"
        else
            log_warning "$service is already enabled"
        fi
    done
}

install_starship_prompt() {
    local install_dir="$HOME/.local/bin"
    local binary_path="$install_dir/starship"

    if [ -f "$binary_path" ]; then
        log_warning "Starship is already installed at $binary_path"
    else
        log_info "Installing Starship..."
        mkdir -p "$install_dir"

        curl -sSL https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-musl.tar.gz \
            | tar -xz -C "$install_dir"

        chmod +x "$binary_path"
        log_info "Starship installed to $binary_path"
    fi
}

install_eza() {
    local VERSION="${1:-v0.23.3}" # Default version if not provided
    local install_dir="$HOME/.local/bin"
    local binary_path="$install_dir/eza"

    if [ -f "$binary_path" ]; then
        log_warning "eza is already installed at $binary_path"
    else
        log_info "Installing eza..."
        mkdir -p "$install_dir"

        curl -sSL https://github.com/eza-community/eza/releases/download/$VERSION/eza_x86_64-unknown-linux-musl.tar.gz \
            | tar -xz -C "$install_dir"

        chmod +x "$binary_path"
        log_info "eza installed to $binary_path"
    fi

}

install_navi() {
    local VERSION="${1:-v2.24.0}" # Default version if not provided
    local install_dir="$HOME/.local/bin"
    local binary_path="$install_dir/navi"

    if [ -f "$binary_path" ]; then
        log_warning "navi is already installed at $binary_path"
    else
        log_info "Installing navi..."
        mkdir -p "$install_dir"

        curl -sSL https://github.com/denisidoro/navi/releases/download/$VERSION/navi-$VERSION-x86_64-unknown-linux-musl.tar.gz \
            | tar -xz -C "$install_dir"

        chmod +x "$binary_path"
        log_info "navi installed to $binary_path"
    fi

}

install_ripgrep(){
    # Note that this installs a standalone version of nvim into ~/.local/packages. In contrast to the previous functions
    # ripgrep is not a single binary but a directory containing multiple files.

    local VERSION="${1:-14.1.1}" # Default version if not provided
    local install_dir="$HOME/.local/packages"
    local package_path="$install_dir/ripgrep"

    local filename="ripgrep-${VERSION}-x86_64-unknown-linux-musl"

    if [ -d "$package_path" ]; then
        log_warning "ripgrep is already installed at $package_path"
    else

        log_info "Installing ripgrep..."
        mkdir -p "$package_path"

        # strip-components flattents the filetree so we get rid of the name of the compressed file.
        curl -LO https://github.com/BurntSushi/ripgrep/releases/download/${VERSION}/${filename}.tar.gz
        tar -C "$package_path" --strip-components=1 -xzf ${filename}.tar.gz
        rm -rf ${filename}.tar.gz

        # create symlink to .local/bin
        mkdir -p "$HOME/.local/bin"
        ln -sf "$package_path/rg" "$HOME/.local/bin/rg"

        log_info "ripgrep installed to $package_path"
    fi

}


install_dust(){
    # Note that this installs a standalone version of dust into ~/.local/packages. In contrast to the previous functions
    # dust is not a single binary but a directory containing multiple files.

    local VERSION="${1:-v1.2.3}" # Default version if not provided
    local install_dir="$HOME/.local/packages"
    local package_path="$install_dir/dust"

    local filename="dust-${VERSION}-x86_64-unknown-linux-musl"

    if [ -d "$package_path" ]; then
        log_warning "dust is already installed at $package_path"
    else

        log_info "Installing dust..."
        mkdir -p "$package_path"

        # strip-components flattents the filetree so we get rid of the name of the compressed file.
        curl -LO https://github.com/bootandy/dust/releases/download/${VERSION}/${filename}.tar.gz
        tar -C "$package_path" --strip-components=1 -xzf ${filename}.tar.gz
        rm -rf ${filename}.tar.gz

        # create symlink to .local/bin
        mkdir -p "$HOME/.local/bin"
        ln -sf "$package_path/dust" "$HOME/.local/bin/dust"

        log_info "dust installed to $package_path"
    fi

}

install_rust() {
    if command -v rustc &> /dev/null; then
        log_warning "Rust is already installed."
    else
        log_info "Installing Rust..."

        # the shell script will launch a guided installer!
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        source $HOME/.cargo/env
        log_info "Rust installed successfully."
    fi
}

uninstall_rust() {
    if command -v rustc &> /dev/null; then
        log_info "Uninstalling Rust..."
        rustup self uninstall -y
        log_info "Rust uninstalled successfully."
    else
        log_warning "Rust is not installed."
    fi
}

install_nvim() {
    # Note that this installs a standalone version of nvim into ~/.local. In contrast to the previous functions
    # nvim is not a single binary but a directory containing multiple files.

    local VERSION="${1:-v0.11.4}" # Default version if not provided
    local install_dir="$HOME/.local/packages"
    local package_path="$install_dir/nvim"
    local filename="nvim-linux-x86_64"

    if [ -d "$package_path" ]; then
        log_warning "nvim is already installed at $package_path"
    else

        # remove any preinstalled version (e.g. those coming from ubuntu or apt)
        if is_installed neovim; then
            log_warning "Removing preinstalled neovim package"
            sudo apt remove -y neovim
        fi

        if [ -d "/usr/bin/nvim" ]; then
            log_warning "Removing preinstalled /usr/bin/nvim"
            sudo rm -rf /usr/bin/nvim
        fi

        log_info "Installing nvim..."


        mkdir -p "$package_path"

        # strip-components flattents the filetree so we get rid of the name of the compressed file.
        curl -LO https://github.com/neovim/neovim/releases/download/$VERSION/${filename}.tar.gz
        tar -C "$package_path" --strip-components=1 -xzf ${filename}.tar.gz
        rm -rf ${filename}.tar.gz

        # create symlink to .local/bin
        mkdir -p "$HOME/.local/bin"
        ln -sf "$package_path/bin/nvim" "$HOME/.local/bin/nvim"

        log_info "nvim installed to $package_path"
    fi

}

install_lazydocker() {

    INSTALL_DIR="$HOME/.local/bin/lazydocker"

    if [ -f "$INSTALL_DIR" ]; then
        log_warning "lazydocker is already installed in $INSTALL_DIR"
    else
        log_info "Installing lazydocker..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh)"
    fi

    # Note it is installed into .local/bin so make sure it is added to the $PATH. e.g. inside of ~/.profile
}

install_zoxide() {

    INSTALL_DIR="$HOME/.local/bin/zoxide"

    if [ -f "$INSTALL_DIR" ]; then
        log_warning "zoxide is already installed in $INSTALL_DIR"
    else
        log_info "Installing zoxide..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh)"
    fi

    # Note it is installed into .local/bin so make sure it is added to the $PATH. e.g. inside of ~/.profile
}

install_vim_pluginmanager() {
    if ! is_installed vim; then
        log_error "vim is not installed. Please install vim first."
        return
    fi

    log_info "Installing vim-plug plugin manager..."
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

}

install_vim_plugins() {
    if ! is_installed vim; then
        log_error "vim is not installed. Please install vim first."
        return
    fi

    # Check if vim-plug is installed
    if [ ! -f ~/.vim/autoload/plug.vim ]; then
        log_error "vim-plug is not installed. Please run install_vim_pluginmanager first."
        return
    fi

    # Install plugins using vim-plug
    log_info "Installing vim plugins..."
    vim +PlugInstall +qall
}



install_tmux_plugin_manager() {

    if ! is_installed tmux; then
        log_error "tmux is not installed. Please install tmux first."
        return
    fi

    TPM_DIR="$HOME/.tmux/plugins/tpm"

    # Check if TPM is already installed
    if [ -d "$TPM_DIR" ]; then
        log_warning "TPM is already installed in $TPM_DIR"
    else
        log_info "Installing Tmux Plugin Manager (TPM)..."
        git clone https://github.com/tmux-plugins/tpm $TPM_DIR
    fi

    log_info "TPM installed successfully!"
}

install_tmux_catppuccin(){
    CATPPUCCIN_DIR=~/.config/tmux/plugins/catppuccin

    if [ -d "$CATPPUCCIN_DIR" ]; then
        log_warning "Catppuccin is already installed in $CATPPUCCIN_DIR"
    else
        log_info "Installing Tmux Catppuccin theme..."
        mkdir -p $CATPPUCCIN_DIR
        git clone -b v2.1.3 https://github.com/catppuccin/tmux.git $CATPPUCCIN_DIR/tmux
    fi
}

install_fzf(){
    local VERSION="${1:-0.65.1}" # Default version if not provided
    local INSTALL_DIR="$HOME/.local/bin"

    mkdir -p "$INSTALL_DIR"

    if [ -d "$INSTALL_DIR/fzf" ]; then
        log_warning "fzf is already installed in $INSTALL_DIR/fzf"
        return
    fi

    curl -L https://github.com/junegunn/fzf/releases/download/v$VERSION/fzf-$VERSION-linux_amd64.tar.gz \
    | tar -xz -C $INSTALL_DIR

    if [ $? -ne 0 ]; then
        log_error "Failed to download or extract fzf."
        return
    fi

    log_info "fzf version $VERSION installed successfully to $INSTALL_DIR/fzf"
}

# When seting up tmux there is some manual cloning of repositories involved. The dotfiles are not managed by GNU Stow
setup_tmux(){
    install_tmux_plugin_manager
    install_tmux_catppuccin
}

setup_dotfiles() {
    log_info "Setting up dotfiles..."

    DOTFILES_REPO_NAME="dotfiles"
    DOTFILES_REPO="https://github.com/sascha-kirch/$DOTFILES_REPO_NAME.git"
    DOTFILES_DIR="$HOME/$DOTFILES_REPO_NAME"

    source dotfiles.conf

    if ! is_installed stow; then
        log_error "GNU Stow is not installed, install it first"
        return
    fi

    # Check if the repository already exists
    if [ -d "$DOTFILES_DIR" ]; then
        log_warning "Directory '$DOTFILES_DIR' already exists. Skipping clone"
    else
        git clone "$DOTFILES_REPO" "$DOTFILES_DIR"
    fi

    # Check if the clone was successful
    if [ $? -eq 0 ]; then
        log_info "Cloning the repository was successful."
    else
        log_error "Failed to clone the repository."
        return
    fi
}


# TODO: stow files individually and check for errors
stow_dotfiles() {
    local dotfiles=("$@")

    pushd "$HOME/dotfiles"

    if [ ${#dotfiles[@]} -ne 0 ]; then
        log_info "Stowing dotfiles: ${dotfiles[*]}"
        stow -R "${dotfiles[@]}"
    else
        log_warning "No dotfiles to be stowed."
    fi

    popd
    log_info "Dotfiles stowed successfully."
}
