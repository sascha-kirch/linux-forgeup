#!/usr/bin/env bash

# Function to check if a package is installed
is_installed() {
    dpkg -s "$1" &> /dev/null
}

# Function to install packages if not already installed
install_packages() {
    local packages=("$@")
    local to_install=()

    for pkg in "${packages[@]}"; do
        if ! is_installed "$pkg"; then
            to_install+=("$pkg")
        fi
    done

    if [ ${#to_install[@]} -ne 0 ]; then
        echo "Installing: ${to_install[*]}"
        sudo apt-get install -y "${to_install[@]}"
    else
        echo "No package to be installed."
    fi
}

install_starship_prompt() {
    local install_dir="$HOME/.local/bin"
    local binary_path="$install_dir/starship"

    if [ -f "$binary_path" ]; then
        echo "Starship is already installed at $binary_path"
    else
        echo "Installing Starship..."
        mkdir -p "$install_dir"

        curl -sSL https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-musl.tar.gz \
            | tar -xz -C "$install_dir"

        chmod +x "$binary_path"
        echo "Starship installed to $binary_path"
    fi

    # Reminder: Don't append to .bashrc if you're using GNU Stow
    echo 'Remember to add: eval "$(starship init bash)" to your stowed .bashrc'

    # Add initialization to .bashrc. I will not add it automatically since I want to use GNU Stow
    # echo 'eval "$(starship init bash)"' >> ~/.bashrc

    # Preset Starship configuration - this will create a new file at ~/.config/starship.toml. I want to use GNU Stow
    # starship preset catppuccin-powerline -o ~/.config/starship.toml
}

install_navi() {
    local VERSION="${1:-v2.24.0}" # Default version if not provided
    local install_dir="$HOME/.local/bin"
    local binary_path="$install_dir/navi"

    if [ -f "$binary_path" ]; then
        echo "navi is already installed at $binary_path"
    else
        echo "Installing navi..."
        mkdir -p "$install_dir"

        curl -sSL https://github.com/denisidoro/navi/releases/download/$VERSION/navi-$VERSION-x86_64-unknown-linux-musl.tar.gz \
            | tar -xz -C "$install_dir"

        chmod +x "$binary_path"
        echo "navi installed to $binary_path"
    fi

}

install_nvim() {
    # Note that this installs a standalone version of nvim into ~/.local. In contrast to the previous functions
    # nvim is not a single binary but a directory containing multiple files.

    local VERSION="${1:-v0.11.4}" # Default version if not provided
    local install_dir="$HOME/.local"
    local package_path="$install_dir/nvim-linux-x86_64"

    if [ -d "$package_path" ]; then
        echo "nvim is already installed at $package_path"
    else

        # remove any preinstalled version (e.g. those coming from ubuntu or apt)
        if is_installed neovim; then
            echo "Removing preinstalled neovim package"
            sudo apt remove -y neovim
        fi

        if [ -d "/usr/bin/nvim" ]; then
            echo "Removing preinstalled /usr/bin/nvim"
            sudo rm -rf /usr/bin/nvim
        fi

        echo "Installing nvim..."
        mkdir -p "$install_dir"

        curl -LO https://github.com/neovim/neovim/releases/download/$VERSION/nvim-linux-x86_64.tar.gz
        tar -C "$install_dir" -xzf nvim-linux-x86_64.tar.gz
        rm -rf nvim-linux-x86_64.tar.gz

        echo "nvim installed to $package_path"
    fi

}

install_lazydocker() {

    LAZYDOCKER_DIR="$HOME/.local/bin/lazydocker"

    if [ -d "$LAZYDOCKER_DIR" ]; then
        echo "TPM is already installed in $LAZYDOCKER_DIR"
    else
        echo "Installing lazydocker..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh)"
    fi

    # Note it is installed into .local/bin so make sure it is added to the $PATH. e.g. inside of ~/.profile
}

install_vim_pluginmanager() {
    if ! is_installed vim; then
        echo "vim is not installed."
        return
    fi

    curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

}

install_vim_plugins() {
    if ! is_installed vim; then
        echo "vim is not installed."
        return
    fi

    # Check if vim-plug is installed
    if [ ! -f ~/.vim/autoload/plug.vim ]; then
        echo "vim-plug is not installed. Please run install_vim_pluginmanager first."
        return
    fi

    # Install plugins using vim-plug
    vim +PlugInstall +qall
}



install_tmux_plugin_manager() {

    if ! is_installed tmux; then
        echo "tmux is not installed."
        return
    fi

    TPM_DIR="$HOME/.tmux/plugins/tpm"

    # Check if TPM is already installed
    if [ -d "$TPM_DIR" ]; then
        echo "TPM is already installed in $TPM_DIR"
    else
        echo "Installing Tmux Plugin Manager (TPM)..."
        git clone https://github.com/tmux-plugins/tpm $TPM_DIR
    fi

    echo "TPM installed successfully!"
}

install_tmux_catppuccin(){
    CATPPUCCIN_DIR=~/.config/tmux/plugins/catppuccin

    if [ -d "$CATPPUCCIN_DIR" ]; then
        echo "Catppuccin is already installed in $CATPPUCCIN_DIR"
    else
        echo "Installing Tmux Catppuccin theme..."
        mkdir -p $CATPPUCCIN_DIR
        git clone -b v2.1.3 https://github.com/catppuccin/tmux.git $CATPPUCCIN_DIR/tmux
    fi
}

install_fzf(){
    local VERSION="${1:-0.65.1}" # Default version if not provided
    local INSTALL_DIR="$HOME/.local/bin"

    mkdir -p "$INSTALL_DIR"

    if [ -d "$INSTALL_DIR/fzf" ]; then
        echo "fzf is already installed in $INSTALL_DIR/fzf"
        return
    fi

    curl -L https://github.com/junegunn/fzf/releases/download/v$VERSION/fzf-$VERSION-linux_amd64.tar.gz \
    | tar -xz -C $INSTALL_DIR

    if [ $? -ne 0 ]; then
        echo "Failed to download or extract fzf."
        return
    fi

    echo "fzf version $VERSION installed successfully to $INSTALL_DIR/fzf"
}

# When seting up tmux there is some manual cloning of repositories involved. The dotfiles are not managed by GNU Stow
setup_tmux(){
    install_tmux_plugin_manager
    install_tmux_catppuccin
}

setup_dotfiles() {
    echo "Setting up dotfiles..."

    DOTFILES_REPO_NAME="dotfiles"
    DOTFILES_REPO="https://github.com/sascha-kirch/$DOTFILES_REPO_NAME.git"
    DOTFILES_DIR="$HOME/$DOTFILES_REPO_NAME"

    source dotfiles.conf

    if ! is_installed stow; then
        echo "Install stow first"
        return
    fi

    # Check if the repository already exists
    if [ -d "$DOTFILES_DIR" ]; then
        echo "Directory '$DOTFILES_DIR' already exists. Skipping clone"
    else
        git clone "$DOTFILES_REPO" "$DOTFILES_DIR"
    fi

    # Check if the clone was successful
    if [ $? -eq 0 ]; then
        echo "Cloning the repository was successful."
    else
        echo "Failed to clone the repository."
        return
    fi
}


stow_dotfiles() {
    local dotfiles=("$@")

    pushd "$HOME/dotfiles"

    if [ ${#dotfiles[@]} -ne 0 ]; then
        echo "Stowing dotfiles: ${dotfiles[*]}"
        stow -R "${dotfiles[@]}"
    else
        echo "No dotfiles to be stowed."
    fi

    popd
    echo "Dotfiles stowed successfully."
}
